version: '3.9'
services:
  redis:
    image: "redis/redis-stack"
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
  medialib:
    build:
      context: .
      dockerfile: ./medialib/Dockerfile
      args:
      - medialib_bld_ver=1
    image: medialib
    environment:
      - MEDIALIB_HOST=medialib
    volumes:
      - log:/home/medialib/MediaLibManager/log
      - db:/home/medialib/MediaLibManager/db
      - music:/home/medialib/MediaLibManager/music
      - config:/home/medialib/MediaLibManager/config
    expose:
     - "9001"
     - "6600"
    command: python ./medialib/_appl_server.py
    ports:
      - "9001:9001" 
      - "6600:6600"
    depends_on:
      - webui 
    restart: always
   
  webui:
    build:
      context: .
      dockerfile: ./www/Dockerfile
      args:
      - wsgi_bld_ver=1
    environment:
      - MEDIALIB_HOST=medialib
    volumes:
      - config:/home/medialib/MediaLibManager/config
      - log:/home/medialib/MediaLibManager/log
      - music:/home/medialib/MediaLibManager/music:ro
    ports:
      - "80:80"
    restart: always
    
  worker:
    image: medialib
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0  
    volumes:
      - log:/home/medialib/MediaLibManager/log
      - db:/home/medialib/MediaLibManager/db
      - music:/home/medialib/MediaLibManager/music
      - config:/home/medialib/MediaLibManager/config  
    command: celery --app=worker.app worker -P threads --concurrency=1 --loglevel=info --logfile=log/celery.log  
    depends_on:
     - redis
     - medialib
    restart: always 
    
  dashboard:
    image: medialib
    command:  celery --broker=redis://redis:6379/0 flower --port=5555 --loglevel=INFO
    ports:
      - "5556:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - medialib
      - redis
      - worker
      
volumes:
   redis_data:
   config:
   log:
   db:
   music:
     driver: local
     driver_opts:
        device: "${DEVICE}"
        o: "${DRIVER_OPTIONS}"
        type: cifs
